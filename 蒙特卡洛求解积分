'蒙特卡洛法求解定积分'
import random

def definite_integral():
    # 确定待积分的函数
    def f(x):
        return x**2
    
    n=10000   #生成随机数的个数
    x=np.zeros(10001)
    y=np.zeros(10001)
    
    x_min=0
    x_max=1
    delta_x=x_max-x_min
    
    y_min=0
    y_max=1
    delta_y=y_max-y_min
    
    count=0
    #生成x和y序列的随机数
    for i in range(n):
        x[i]=random.uniform(x_min,x_max)
        y[i]=random.uniform(y_min,y_max)
        if(y[i]<f(x[i])):
            count=count+1
        
    p=count/n
    result=p*(delta_x*delta_y)
    print(result)
    
    
'蒙特卡洛法求解二重定积分'

def double_integral():
     # 确定待积分的函数
    def f(x,y):
        return 1+(1-x**2-y**2)**0.5-(x**2+y**2)**0.5
    
    n=100000   #生成随机数的个数
    x=np.zeros(100001)
    y=np.zeros(100001)
    z=np.zeros(100001)
    
    x_min=-1
    x_max=1
    delta_x=x_max-x_min
    
    y_min=-1
    y_max=1
    delta_y=y_max-y_min
    
    z_min=0
    z_max=2
    delta_z=z_max-z_min
    
    count=0
    #生成x和y序列的随机数
    for i in range(n):
        x[i]=random.uniform(x_min,x_max)
        y[i]=random.uniform(y_min,y_max)
        z[i]=random.uniform(z_min,z_max)
        if(z[i]<f(x[i],y[i]) and x[i]**2+y[i]**2<1):
            count=count+1
        
    p=count/n
    result=p*(delta_x*delta_y*delta_z)
    print(result)
    
double_integral()       
    
